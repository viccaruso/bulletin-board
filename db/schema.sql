-- Table: public.categories

-- DROP TABLE IF EXISTS public.categories;

CREATE TABLE IF NOT EXISTS public.categories
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    emoji text COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT categories_pkey PRIMARY KEY (id),
    CONSTRAINT categories_emoji_key UNIQUE (emoji)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.categories
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.categories
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.categories TO anon;

GRANT ALL ON TABLE public.categories TO authenticated;

GRANT ALL ON TABLE public.categories TO postgres;

GRANT ALL ON TABLE public.categories TO service_role;

GRANT ALL ON TABLE public.categories TO supabase_admin;

COMMENT ON TABLE public.categories
    IS 'categories for posts';
-- POLICY: Enable insert for authenticated users only

-- DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON public.categories;

CREATE POLICY "Enable insert for authenticated users only"
    ON public.categories
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK (true);
-- POLICY: Enable read access for all users

-- DROP POLICY IF EXISTS "Enable read access for all users" ON public.categories;

CREATE POLICY "Enable read access for all users"
    ON public.categories
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

-- Table: public.posts

-- DROP TABLE IF EXISTS public.posts;

CREATE TABLE IF NOT EXISTS public.posts
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    category_id bigint NOT NULL,
    user_id uuid NOT NULL DEFAULT auth.uid(),
    contact text COLLATE pg_catalog."default",
    CONSTRAINT posts_pkey PRIMARY KEY (id),
    CONSTRAINT posts_category_id_fkey FOREIGN KEY (category_id)
        REFERENCES public.categories (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.posts
    OWNER to supabase_admin;

ALTER TABLE IF EXISTS public.posts
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.posts TO anon;

GRANT ALL ON TABLE public.posts TO authenticated;

GRANT ALL ON TABLE public.posts TO postgres;

GRANT ALL ON TABLE public.posts TO service_role;

GRANT ALL ON TABLE public.posts TO supabase_admin;

COMMENT ON TABLE public.posts
    IS 'bulletin board posts';
-- POLICY: Enable insert for authenticated users only

-- DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON public.posts;

CREATE POLICY "Enable insert for authenticated users only"
    ON public.posts
    AS PERMISSIVE
    FOR INSERT
    TO authenticated
    WITH CHECK (true);
-- POLICY: Enable read access for public

-- DROP POLICY IF EXISTS "Enable read access for public" ON public.posts;

CREATE POLICY "Enable read access for public"
    ON public.posts
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);